apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-webserver
  labels:
    app: {{ .Release.Name }}-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-webserver
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-webserver
    spec:
      initContainers:
        - name: init-db
          image: "{{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}"
          command: ["airflow"]
          args: ["db", "migrate"]
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: "{{ .Values.executor }}"
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: "{{ .Values.airflow.config.AIRFLOW__CORE__LOAD_EXAMPLES }}"
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-postgresql
                  key: sqlalchemy-url
      containers:
        - name: webserver
          image: "{{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}"
          ports:
            - containerPort: 8080
          command: ["airflow"]
          args: ["webserver"]
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: "{{ .Values.executor }}"
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: "{{ .Values.airflow.config.AIRFLOW__CORE__LOAD_EXAMPLES }}"
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-postgresql
                  key: sqlalchemy-url
          volumeMounts:
            - name: dags
              mountPath: /opt/airflow/dags
      volumes:
        - name: dags
          persistentVolumeClaim:
            claimName: {{ .Values.dags.persistence.existingClaim }}
